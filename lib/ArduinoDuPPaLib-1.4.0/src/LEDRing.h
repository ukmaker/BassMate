//
//    FILE: LEDRing.h
// VERSION: 1.0..
// PURPOSE: Library for LEDRing from DUPPA
// LICENSE: GPL v3 (http://www.gnu.org/licenses/gpl.html)
//
// DATASHEET:
//
//     URL:
//
// AUTHOR:
// Simone Caron
//

#ifndef LEDRing_H
#define LEDRing_H

#if (ARDUINO >= 100)
#include <Arduino.h>
#else
#include <WProgram.h>
#endif

#define ISSI_PAGE1 0x00
#define ISSI_PAGE2 0x01
#define ISSI_PAGE3 0x02
#define ISSI_PAGE4 0x03

#define ISSI_COMMANDREGISTER 0xFD
#define ISSI_COMMANDREGISTER_LOCK 0xFE
#define ISSI_INT_MASK 0xF0
#define ISSI_INT_STATUS 0xF1
#define ISSI_CONFIGURATION 0x00
#define ISSI_GLOBALCURRENT 0x01

#define ISSI_PULLUP 0x0F
#define ISSI_PULLDOWN 0x10
#define ISSI_ULOCK_CODE 0xC5
#define RESET_REG 0x11

class LEDRing {
  public:

    LEDRing(uint8_t add);
    void LEDRing_PWM_MODE(void);
    void LEDRing_ClearAll(void);
    void LEDRing_Set_RGB(uint8_t led_n, uint32_t color);
    void LEDRing_Set_RED(uint8_t led_n, uint8_t color);
    void LEDRing_Set_GREEN(uint8_t led_n, uint8_t color);
    void LEDRing_Set_BLUE(uint8_t led_n, uint8_t color);

    void LEDRing_Reset(void);
    void LEDRing_EnableAllOutput(void);
    void LEDRing_GlobalCurrent(uint8_t curr);
    void LEDRing_Configuration(uint8_t conf);
    void LEDRing_PULLUP(uint8_t pull);
    void LEDRing_PULLDOWN(uint8_t pull);



  private:
    const uint8_t issi_led_map[3][48] = {
      {0xAD, 0xAC, 0xAB, 0xAA, 0xA9, 0xA8, 0xA5, 0xA4, 0xA3, 0xA2, 0xA1, 0xA0, 0x7D, 0x7C, 0x7B,  0x7A, 0x79, 0x78, 0x75, 0x74, 0x73,  0x72, 0x71, 0x70, 0x4D, 0x4C, 0x4B, 0x4A, 0x49, 0x48, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10}, // Red
      {0x9D, 0x9C, 0x9B, 0x9A, 0x99, 0x98, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90, 0x6D, 0x6C, 0x6B,  0x6A, 0x69, 0x68, 0x65, 0x64, 0x63,  0x62, 0x61, 0x60, 0x3D, 0x3C, 0x3B, 0x3A, 0x39, 0x38, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00}, // Green
      {0xBD, 0xBC, 0xBB, 0xBA, 0xB9, 0xB8, 0xB5, 0xB4, 0xB3, 0xB2, 0xB1, 0xB0, 0x8D, 0x8C, 0x8B,  0x8A, 0x89, 0x88, 0x85, 0x84, 0x83,  0x82, 0x81, 0x80, 0x5D, 0x5C, 0x5B, 0x5A, 0x59, 0x58, 0x55, 0x54, 0x53, 0x52, 0x51, 0x50, 0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x28, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20}, // Blue
    };
    
    uint8_t _add;
    void  selectBank(uint8_t b);
    void  writeRegister8(uint8_t reg, uint8_t data);
    void  writeBuff(uint8_t reg, uint8_t *data, uint8_t dim);
};
#endif
